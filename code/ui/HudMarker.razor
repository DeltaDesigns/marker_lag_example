@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits PanelComponent

<root>
   
    <div class="markerMain">
        <div style="background-color: @StringColor; width: 55px; height: 55px" class="marker"></div>

        <img src=@MarkerIcon class="markerIcon"/>
        <div class="markerLabel">
            <label style="font-size: @FontSize">@MarkerLabel</label>
        </div>

        <div class="markerBorder" style="width: 65px; height: 65px"/>

    </div>

    <div class="distanceLabel" style="left: @(FlipDistance ? 65 : -100)%;">
        <label>@DistanceTo m</label>
    </div>
    <div class="objectiveLabel">
        <label>@ObjectiveLabel.ToUpper()</label>
    </div>
    <div class="locationLabel">
        <label>@LocationLabel.ToUpper()</label>
    </div>
    
</root>

@code
{

    [Property] public bool StayOnScreen { get; set; } = true;
    [Property] public bool HideDistance { get; set; } = false;
    [Property] public bool HideText { get; set; } = false;

    [Property, Description("Show distance label on right side?")]
    public bool FlipDistance { get; set; } = false;

    [Property] public Color Color { get; set; } = "#7F7F7F7F";

    [Property, Description("Icon for the marker"), ImageAssetPath]
    public string MarkerIcon { get; set; }

    [Property, Description("Text for the marker, if you aren't using an icon")]
    public string MarkerLabel { get; set; } = "";

    [Property] public string ObjectiveLabel { get; set; } = "";
    [Property] public string LocationLabel { get; set; } = "";
    [Property] public int FontSize { get; set; } = 35;

    [Property, Description("Being within this distance will hide this marker")]
    public int HideInDistance { get; set; } = 15;

    [Property, Description("Marker will only become visible if within this range (0 = always show)")]
    public int ShowInDistance { get; set; } = 0;

    public float DistanceTo { get; set; }
    public string StringColor { get; set; }
    public float DistanceFromCenter { get; set; } = 0.9f;

    /// <summary>
	/// the hash determines if the system should be rebuilt. If it changes, it will be rebuilt
	/// </summary>
	protected override int BuildHash() => System.HashCode.Combine(DistanceTo, StringColor);

    protected override void OnAwake()
    {
        StringColor = $"rgba({Color.ToColor32().r}, {Color.ToColor32().g}, {Color.ToColor32().b}, {Color.a})";
    }

    protected override void OnUpdate()
    {
        PositionAtWorld();
        UpdateDistance();
    }

    public void PositionAtWorld()
    {
        bool hide = false;
        var screenpos3d = GetScreenPoint();
        var screenpos = new Vector2(screenpos3d);
        var cached = screenpos;

        SetClass("hideAll", (DistanceTo < HideInDistance) || (DistanceTo > ShowInDistance) && ShowInDistance != 0);
        if (StayOnScreen)
        {
            var screenCenter = new Vector2(0.5f, 0.5f);
            var direction = cached - screenCenter;
            if (direction.Length >= (DistanceFromCenter * 0.5))
            {
                screenpos = screenCenter + direction.Normal * (DistanceFromCenter * 0.5);
                hide = true;
            }

            SetClass("hideDistance", hide || HideDistance);
            SetClass("hideText", hide || HideText);
            //SetClass("hideText", Distance > 25f || isOnScreen);
        }

        SetClass("fadeMarker", hide);

        Panel.Style.Left = Length.Fraction(screenpos.x);
        Panel.Style.Top = Length.Fraction(screenpos.y);
    }

    public Vector3 GetScreenPoint()
    {
        return Transform.Position.ToScreen();
    }

    public void UpdateDistance()
    {
        var distance = DistanceFrom(GameManager.ActiveScene.Camera.Transform.Position, Transform.Position);
        DistanceTo = InchesToMeters(distance);
    }

	public static float DistanceFrom(Vector3 v1, Vector3 v2)
	{
		Vector3 difference = new Vector3(
		v1.x - v2.x,
		v1.y - v2.y,
		v1.z - v2.z);

		float distance = (float)Math.Sqrt(
		Math.Pow(difference.x, 2f) +
		Math.Pow(difference.y, 2f) +
		Math.Pow(difference.z, 2f));

		return distance;

	}

	public static float InchesToMeters(float inches)
	{
		return (float)Math.Round(inches * 0.0254f, 0);
	}
}
